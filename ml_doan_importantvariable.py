# -*- coding: utf-8 -*-
"""ML_DoAn_ImportantVariable.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1stWpo3orW99NfLFKiRIYAjd-mAjL3SbH
"""

import numpy as np
import pandas as pd
from collections import Counter
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/Daegu_Real_Estate_data.csv")
df=df[['Size(sqf)', 'HallwayType', 'YrSold', 'YearBuilt', 'SalePrice']]
df.info()

hallayType_mapping={
    'terraced':2,
    'mixed':1,
    'corridor':0
}
df['HallwayType']=df['HallwayType'].map(hallayType_mapping)

# Phat hien du lieu outlier(ngoai lai) cua cot sale
plt.figure(figsize=(20,8))
# sns.distplot(df['SalePrice'])
sns.boxplot(y=df['SalePrice'])
# sort cot SalePrice va lay index cua cac SalePrice > 510000
df.sort_values(by='SalePrice').loc[df['SalePrice']>510000]
print('-----Delete outlier: %d'%(len(df.sort_values(by='SalePrice').loc[df['SalePrice']>510000])))

# Loai bo cac dong du lieu co SalePrice > 510000
adj_df = df.drop(df.loc[df['SalePrice']>510000].index, axis=0)


# Chuan hoa du lieu
from sklearn import preprocessing
X = adj_df.iloc[:, 1:].values
y= adj_df.iloc[:, 0].values
stdsc = preprocessing.StandardScaler()
X_std = stdsc.fit_transform(X)
# print(adj_df.shape)

#Ap dung cac thuat toan de tao model
scoresOfGBR=[] # Luu ket qua danh gia cua Gradient Boosting Regression

# GBR
from sklearn import ensemble
def GBR(X_train, y_train, X_test, y_test):
  params = {'n_estimators': 500, 'max_depth': 4, 'min_samples_split': 2,
          'learning_rate': 0.01, 'loss': 'ls'}
  clf = ensemble.GradientBoostingRegressor(**params)
  clf.fit(X_train, y_train)
  y_pred=clf.predict(X_test)
  scoresOfGBR.append({
      'RMSE': np.sqrt(mean_squared_error(y_test, y_pred)),
      'MAE': mean_absolute_error(y_test, y_pred),
      'R2 score': clf.score(X_test, y_test)})
  

from sklearn.model_selection import train_test_split
# Kiem tra do chinh xac 10 lan va tinh trung binh
for i in range(1, 11):
  # Chia tap train va test
  X_train, X_test, y_train, y_test=train_test_split(X_std, y, test_size=0.3, random_state=i)
  GBR(X_train, y_train, X_test, y_test)

# Danh gia Gradient Boosting Regression
gbrRMSE=sum([item['RMSE'] for item in scoresOfGBR])/len(scoresOfGBR)
gbrMAE=sum([item['MAE'] for item in scoresOfGBR])/len(scoresOfGBR)
gbrR2Score=sum([item['R2 score'] for item in scoresOfGBR])/len(scoresOfGBR)
print('-----------------Gradient Boosting Regression------------------------')
print('RMSE: %.2f, MAE: %.2f, R2 score: %.2f' %(gbrRMSE, gbrMAE, gbrR2Score))

for index, value in enumerate(scoresOfGBR, start=1):
  print('Scores in loop %d of GBR' %(index))
  print(value)